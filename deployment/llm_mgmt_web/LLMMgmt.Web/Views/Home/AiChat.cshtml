@model LLMMgmtAgent.Web.Models.AiChatViewModel
@{
    ViewData["Title"] = "AI Chat";
}

<div class="d-flex flex-column" style="height:70vh; min-height:400px;">
    <!-- Chat messages area -->
    <div id="chat-messages" class="flex-grow-1 overflow-auto border rounded p-3 mb-2 bg-white d-flex flex-column">
        @foreach (var msg in Model.Messages)
        {
            if (msg.Sender == "User")
            {
                <div class="chat-msg-user align-self-end mb-2">
                    <div class="bg-primary text-white p-2 rounded">
                        <strong>You:</strong> <span>@msg.Content</span>
                    </div>
                </div>
            }
            else if (msg.Sender == "Bot")
            {
                <div class="chat-msg-bot align-self-start mb-2">
                    <div class="bg-light p-2 rounded">
                        <strong>AI Assistant:</strong> 
                        <div class="markdown-content">@msg.Content</div>
                    </div>
                </div>
            }
        }
    </div>
    
    <!-- Input area -->
    <form id="chat-form" method="post" asp-action="AiChat" autocomplete="off">
        <div class="row g-2">
            <div class="col-9">
                <input id="user-input" 
                       name="UserInput" 
                       asp-for="UserInput" 
                       class="form-control" 
                       placeholder="Type your message..." 
                       autocomplete="off" 
                       maxlength="1000" />
            </div>
            <div class="col-3 d-grid">
                <button type="submit" 
                        id="send-btn" 
                        class="btn btn-primary"
                        data-loading-text="Sending..."
                        data-original-text="Send">
                    <span class="btn-text">Send</span>
                    <span class="spinner-border spinner-border-sm d-none" 
                          role="status" 
                          aria-hidden="true"></span>
                </button>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-12">
                <small class="text-muted">
                    按下 Enter 鍵傳送。處理期間按鈕將會停用。
                    <span id="status-indicator" class="float-end text-success d-none">
                        <i class="fas fa-circle"></i> Ready
                    </span>
                </small>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        // Enhanced button locking functionality
        document.addEventListener('DOMContentLoaded', function() {
            const userInput = document.getElementById('user-input');
            const sendBtn = document.getElementById('send-btn');
            const chatMessages = document.getElementById('chat-messages');
            const statusIndicator = document.getElementById('status-indicator');
            
            let isLocked = false;
            let lockingTimeout = null;
            
            // Process any existing markdown content
            if (typeof markdownRenderer !== 'undefined') {
                markdownRenderer.refreshContent();
            }
            
            // Enhanced button locking function
            function lockSubmitButton(lock = true) {
                const btnText = sendBtn.querySelector('.btn-text');
                const spinner = sendBtn.querySelector('.spinner-border');
                
                isLocked = lock;
                
                if (lock) {
                    // Lock the button
                    sendBtn.disabled = true;
                    sendBtn.classList.add('disabled');
                    sendBtn.setAttribute('aria-busy', 'true');
                    
                    // Change button text and show spinner
                    btnText.textContent = sendBtn.getAttribute('data-loading-text') || 'Sending...';
                    spinner.classList.remove('d-none');
                    
                    // Disable input field
                    if (userInput) {
                        userInput.disabled = true;
                        userInput.classList.add('disabled');
                    }
                    
                    // Update status indicator
                    if (statusIndicator) {
                        statusIndicator.innerHTML = '<i class="fas fa-circle text-warning"></i> Sending...';
                        statusIndicator.classList.remove('d-none');
                    }
                    
                    // Set timeout as safety measure (30 seconds)
                    lockingTimeout = setTimeout(() => {
                        console.warn('Button unlock timeout reached');
                        lockSubmitButton(false);
                    }, 30000);
                    
                    console.log('Submit button locked');
                } else {
                    // Unlock the button
                    sendBtn.disabled = false;
                    sendBtn.classList.remove('disabled');
                    sendBtn.setAttribute('aria-busy', 'false');
                    
                    // Reset button text and hide spinner
                    btnText.textContent = sendBtn.getAttribute('data-original-text') || 'Send';
                    spinner.classList.add('d-none');
                    
                    // Enable input field
                    if (userInput) {
                        userInput.disabled = false;
                        userInput.classList.remove('disabled');
                        userInput.focus(); // Focus back to input
                    }
                    
                    // Update status indicator
                    if (statusIndicator) {
                        statusIndicator.innerHTML = '<i class="fas fa-circle text-success"></i> Ready';
                        setTimeout(() => {
                            statusIndicator.classList.add('d-none');
                        }, 2000);
                    }
                    
                    // Clear timeout
                    if (lockingTimeout) {
                        clearTimeout(lockingTimeout);
                        lockingTimeout = null;
                    }
                    
                    console.log('Submit button unlocked');
                }
            }
            
            // Enhanced sendMessage function with improved button locking
            window.sendMessageWithText = async function(messageText) {
                if (isLocked) {
                    console.log('Button is locked, ignoring request');
                    return;
                }
                
                if (!messageText || !sendBtn || !chatMessages) return;
                
                // Lock the button immediately
                lockSubmitButton(true);
                
                // Add user message immediately to UI
                const messageDiv = document.createElement('div');
                messageDiv.className = 'chat-msg-user align-self-end mb-2';
                messageDiv.innerHTML = `
                    <div class="bg-primary text-white p-2 rounded">
                        <strong>You:</strong> <span>${messageText}</span>
                    </div>
                `;
                chatMessages.appendChild(messageDiv);
                
                // Auto-scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
                
                try {
                    const response = await fetch('/Home/SendMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ message: messageText })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        // Create bot message container
                        const botMessageDiv = document.createElement('div');
                        botMessageDiv.className = 'chat-msg-bot align-self-start mb-2';
                        
                        const botContent = document.createElement('div');
                        botContent.className = 'bg-light p-2 rounded';
                        
                        const botLabel = document.createElement('strong');
                        botLabel.textContent = 'AI Assistant:';
                        botContent.appendChild(botLabel);
                        
                        // Create markdown content container
                        const botResponse = document.createElement('div');
                        botResponse.className = 'markdown-content';
                        
                        // Add the response content for rendering
                        botResponse.textContent = data.response;
                        
                        botContent.appendChild(botResponse);
                        botMessageDiv.appendChild(botContent);
                        chatMessages.appendChild(botMessageDiv);
                        
                        // Render markdown with our enhanced renderer
                        if (typeof markdownRenderer !== 'undefined') {
                            markdownRenderer.render(data.response, botResponse);
                        }
                    } else {
                        // Show error message
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'chat-msg-bot align-self-start mb-2';
                        errorDiv.innerHTML = `
                            <div class="bg-danger text-white p-2 rounded">
                                <strong>Error:</strong> <span>${data.error}</span>
                            </div>
                        `;
                        chatMessages.appendChild(errorDiv);
                    }
                } catch (error) {
                    console.error('Network error:', error);
                    // Show network error
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'chat-msg-bot align-self-start mb-2';
                    errorDiv.innerHTML = `
                        <div class="bg-danger text-white p-2 rounded">
                            <strong>Network Error:</strong> <span>${error.message}</span>
                        </div>
                    `;
                    chatMessages.appendChild(errorDiv);
                } finally {
                    // Always unlock the button when done
                    lockSubmitButton(false);
                    
                    // Auto-scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                }
            };
            
            // Form submit handler
            const chatForm = document.getElementById('chat-form');
            if (chatForm) {
                chatForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    if (isLocked) {
                        console.log('Button is locked, ignoring submit');
                        return;
                    }
                    
                    const message = userInput.value.trim();
                    if (message) {
                        // Clear input immediately
                        userInput.value = '';
                        
                        // Send the message
                        window.sendMessageWithText(message);
                    }
                });
            }
            
            // Enter key handler
            if (userInput) {
                userInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        
                        if (isLocked) {
                            console.log('Button is locked, ignoring Enter key');
                            return;
                        }
                        
                        const message = this.value.trim();
                        if (message) {
                            // Clear input immediately
                            this.value = '';
                            
                            // Send the message
                            window.sendMessageWithText(message);
                        }
                    }
                });
                
                // Input event handler for real-time button state
                userInput.addEventListener('input', function() {
                    if (!isLocked) {
                        const hasText = this.value.trim().length > 0;
                        sendBtn.disabled = !hasText;
                    }
                });
            }
            
            // Initial button state
            if (userInput && sendBtn) {
                sendBtn.disabled = userInput.value.trim().length === 0;
            }
            
            // Show ready status initially
            setTimeout(() => {
                if (statusIndicator) {
                    statusIndicator.classList.remove('d-none');
                    setTimeout(() => {
                        statusIndicator.classList.add('d-none');
                    }, 3000);
                }
            }, 1000);
        });
    </script>
}